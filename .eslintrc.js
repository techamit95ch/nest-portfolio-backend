module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
    tsconfigRootDir: __dirname,
  },
  plugins: [
    '@typescript-eslint',
    'import',
    'prettier',
    'simple-import-sort',
    'prettier',
    'sort-keys-fix',
    'sort-keys',
    'import-newlines',
    'unused-imports',
    'jest',
  ],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:prettier/recommended',
  ],
  rules: {
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    'newline-after-var': ['error', 'always'],
    'newline-before-return': 'error',
    'no-console': ['error', { allow: ['warn', 'error'] }],
    'no-const-assign': 'error',
    'no-empty': 'warn',
    semi: ['error', 'always'],
    'simple-import-sort/exports': 'error',
    'simple-import-sort/imports': [
      'error',
      {
        groups: [
          ['^\\u0000'],
          ['^react', '^@?\\w'],
          ['^\\.\\.(?!/?$)', '^\\.\\./?$'],
          ['^\\./(?=.*/)(?!/?$)', '^\\.(?!/?$)', '^\\./?$'],
        ],
      },
    ],
    'prettier/prettier': [
      'error',
      {
        endOfLine: 'auto',
      },
    ],
    '@typescript-eslint/consistent-type-imports': 'off',
    '@typescript-eslint/dot-notation': 'warn',
    '@typescript-eslint/no-empty-interface': [
      'error',
      { allowSingleExtends: false },
    ],
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/no-misused-new': 'error',
    '@typescript-eslint/no-misused-promises': [
      'warn',
      { checksSpreads: false, checksVoidReturn: false },
    ],
    '@typescript-eslint/no-throw-literal': 'warn',
    '@typescript-eslint/no-unused-modules': 0,
    'no-unused-vars': 'off', // or "@typescript-eslint/no-unused-vars": "off",
    'unused-imports/no-unused-imports': 'error',
    'unused-imports/no-unused-vars': [
      'warn',
      {
        vars: 'all',
        varsIgnorePattern: '^_',
        args: 'after-used',
        argsIgnorePattern: '^_',
      },
    ],
    '@typescript-eslint/no-unused-vars': [
      'error',
      {
        vars: 'local',
        args: 'after-used',
        ignoreRestSiblings: false,
        destructuredArrayIgnorePattern: '^_',
      },
    ],
    '@typescript-eslint/promise-function-async': 'warn',
    '@typescript-eslint/require-array-sort-compare': 'warn',
    '@typescript-eslint/restrict-plus-operands': 'warn',
    '@typescript-eslint/restrict-template-expressions': 'warn',
    '@typescript-eslint/return-await': 'warn',
    '@typescript-eslint/switch-exhaustiveness-check': 'warn',
    'array-bracket-spacing': ['error', 'never'],
    bracketSameLine: 0,
    bracketSpacing: 0,
    'import/no-duplicates': ['error', { considerQueryString: true }],
    'import/no-unused-modules': 'off',
    jsxSingleQuote: 0,
    'linebreak-style': ['error', 'unix'],
    'max-len': ['error', { code: 300 }],
    'newline-after-var': ['error', 'always'],
    'newline-before-return': 'error',
    'no-console': ['error', { allow: ['warn', 'error'] }],
    'no-const-assign': 'error',
    'no-empty': 'warn',
    'no-mixed-spaces-and-tabs': ['error', 'smart-tabs'],
    'no-restricted-syntax': [
      'error',
      {
        selector: 'TSEnumDeclaration:not([const=true])',
        message: "Don't declare non-const enums",
      },
    ],
    'no-return-await': 'off',
    'no-throw-literal': 'off',
    'no-warning-comments': [
      'error',
      {
        terms: ['todo', 'fixme', 'eslint-disable'],
        location: 'anywhere',
      },
    ],
    'object-curly-spacing': ['error', 'always'],
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: ['const'], next: '*' },
      { blankLine: 'any', prev: 'directive', next: 'directive' },
      { blankLine: 'always', prev: '*', next: 'return' },
    ],
    'prefer-const': 'error',
  },
  overrides: [
    {
      files: ['*.js'],
      rules: {
        '@typescript-eslint/no-var-requires': 'off',
      },
    },
  ],
  settings: {
    'import/resolver': {
      node: {
        extensions: ['.js', '.ts'],
      },
    },
  },
};
